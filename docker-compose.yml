services:
  kafka:
    image: confluentinc/cp-kafka:latest
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"

  postgres-server:
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "6543:5432"
    volumes:
      - ./dbscripts:/docker-entrypoint-initdb.d/

  pgadmin:
    image: dpage/pgadmin4:latest
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: postgres
      PGADMIN_DEFAULT_PASSWORD: postgres

  #  nginx:
  #    image: nginx:latest
  #    ports:
  #      - "8080:80"
  #    volumes:
  #      - ./nginx.conf:/etc/nginx/conf.d/default.conf
  #    depends_on:
  #      - frontend
  #    networks:
  #      - internal_network


  api-gateway:
    build: ./api-gateway
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-server:5432/api_gateway_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
    ports:
      - "8888:8080"
    depends_on:
      - training-service
      - coach-service
      - client-service


  coach-service:
    build: ./coach-service
    ports:
      - "8082:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-server:5432/coach_service_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
    depends_on:
      - kafka
      - postgres-server

  training-service:
    build: ./training-service
    ports:
      - "8083:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-server:5432/training_service_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
    depends_on:
      - kafka
      - postgres-server

  client-service:
    build: ./client-service
    ports:
      - "8084:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-server:5432/client_service_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
    depends_on:
      - kafka
      - postgres-server

  keycloak:
    image: quay.io/keycloak/keycloak:26.0.0
    environment:
        KEYCLOAK_ADMIN: admin
        #      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
        KEYCLOAK_ADMIN_PASSWORD: admin
        KC_HTTP_PORT: 8080
        KC_HOSTNAME_URL: http://localhost:8080
        KC_HOSTNAME_ADMIN_URL: http://localhost:8080
        KC_HOSTNAME_STRICT_BACKCHANNEL: true
        #KC_HOSTNAME_DEBUG: true
        KC_HTTP_RELATIVE_PATH: /
        KC_HTTP_ENABLED: true
        KC_HEALTH_ENABLED: true
        KC_METRICS_ENABLED: true
        #KC_LOG_LEVEL: DEBUG
    command:
      - start-dev
    ports:
      - 8080:8080
#    depends_on:
#      - keycloak-db
    healthcheck:
      test: ['CMD-SHELL', '[ -f /tmp/HealthCheck.java ] || echo "public class HealthCheck { public static void main(String[] args) throws java.lang.Throwable { System.exit(java.net.HttpURLConnection.HTTP_OK == ((java.net.HttpURLConnection)new java.net.URL(args[0]).openConnection()).getResponseCode() ? 0 : 1); } }" > /tmp/HealthCheck.java && java /tmp/HealthCheck.java http://localhost:8080/auth/health/live']
      interval: 5s
      timeout: 5s
      retries: 20

#  keycloak-db:
#    image: postgres:16
#    environment:
#      POSTGRES_DB: keycloak
#      POSTGRES_USER: keycloak
#      POSTGRES_PASSWORD: password
#    ports:
#      - 5433:5432
#    volumes:
#      - keycloak_data:/var/lib/postgresql/data

volumes:
  keycloak_data: