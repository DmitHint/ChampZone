services:
  kafka:
    image: confluentinc/cp-kafka:latest
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    networks:
      - app-network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
    networks:
      - app-network

  postgres-server:
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "6543:5432"
    volumes:
      - ./dbscripts:/docker-entrypoint-initdb.d/
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  pgadmin:
    image: dpage/pgadmin4:latest
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${EMAIL_USERNAME}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
    networks:
      - app-network


  frontend:
    build: ./frontend
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
    ports:
      - "3000:3000"
    networks:
      - app-network

  nginx:
    image: nginx:latest
    ports:
      - "8080:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - frontend
      - api-gateway
#      - coach-service
#      - client-service
#      - training-service
    networks:
      - app-network


  api-gateway:
    build: ./api-gateway
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-server:5432/api_gateway_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "8888:8080"
    depends_on:
      - training-service
      - coach-service
      - client-service
    networks:
      - app-network

  coach-service:
    build: ./coach-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-server:5432/coach_service_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      GRPC_NOTIFICATION_SERVICE_HOST: ${GRPC_NOTIFICATION_SERVICE_HOST}
      GRPC_NOTIFICATION_SERVICE_PORT: ${GRPC_NOTIFICATION_SERVICE_PORT}
    depends_on:
      - kafka
      - postgres-server
    networks:
      - app-network

  training-service:
    build: ./training-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-server:5432/training_service_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
    depends_on:
      - kafka
      - postgres-server
    networks:
      - app-network

  client-service:
    build: ./client-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-server:5432/client_service_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
    depends_on:
      - kafka
      - postgres-server
    networks:
      - app-network

  notification-service:
    build: ./notification-service
    environment:
      MAIL_PROTOCOL: ${MAIL_PROTOCOL}
      MAIL_HOST: ${MAIL_HOST}
      MAIL_PORT: ${MAIL_PORT}
      EMAIL_USERNAME: ${EMAIL_USERNAME}
      EMAIL_PASSWORD: ${EMAIL_PASSWORD}
      GRPC_SERVER_PORT: ${GRPC_NOTIFICATION_SERVICE_PORT}
    expose:
      - 50055
    networks:
      - app-network


  keycloak:
    image: quay.io/keycloak/keycloak:26.0.0
    environment:
        KEYCLOAK_ADMIN: admin
        KEYCLOAK_ADMIN_PASSWORD: admin
        KC_HTTP_PORT: 6060
        KC_HOSTNAME_URL: http://localhost:6060
        KC_HOSTNAME_ADMIN_URL: http://localhost:6060
        KC_HOSTNAME_STRICT_BACKCHANNEL: true
        #KC_HOSTNAME_DEBUG: true
        KC_HTTP_RELATIVE_PATH: /
        KC_HTTP_ENABLED: true
        KC_HEALTH_ENABLED: true
        KC_METRICS_ENABLED: true
        #KC_LOG_LEVEL: DEBUG
    command:
      - start-dev
    ports:
      - "6060:6060"
#    healthcheck:
#      test: ['CMD-SHELL', '[ -f /tmp/HealthCheck.java ] || echo "public class HealthCheck { public static void main(String[] args) throws java.lang.Throwable { System.exit(java.net.HttpURLConnection.HTTP_OK == ((java.net.HttpURLConnection)new java.net.URL(args[0]).openConnection()).getResponseCode() ? 0 : 1); } }" > /tmp/HealthCheck.java && java /tmp/HealthCheck.java http://localhost:6060/auth/health/live']
#      interval: 5s
#      timeout: 5s
#      retries: 20

volumes:
  keycloak_data:

networks:
  app-network:
    driver: bridge